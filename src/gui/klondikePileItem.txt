#include "klondikePileItem.hpp"

#include <QBrush>
#include <QDebug>
#include <QPen>

KlondikePileItem::KlondikePileItem(KlondikePile* pile, QGraphicsItem* parent)
    : QGraphicsRectItem(parent), pile_(pile) {
  setRect(0, 0, 100, 150);  // Default rectangle size
  setPen(QPen(Qt::black));
  setBrush(QBrush(Qt::transparent));
  updateVisuals();  // Initialize the visual representation
}

void KlondikePileItem::updateVisuals() {
  // Clear the current visual stack of cards
  for (CardItem* cardItem : cardItems_) {
    delete cardItem;  // Remove existing card items from memory
  }
  cardItems_.clear();

  // Iterate through the logical cards in the pile
  const auto& cards = pile_->getCards();  // Get cards from the logical pile
  int yOffset = 20;                       // Overlap between cards
  for (size_t i = 0; i < cards.size(); ++i) {
    // Create a CardItem for each card in the pile
    CardItem* cardItem = new CardItem(cards[i].get(), this);
    cardItem->setPos(0, i * yOffset);  // Stack the cards with overlap
    cardItems_.push_back(cardItem);    // Add the CardItem to the vector
  }
}

void KlondikePileItem::addCardItem(CardItem* cardItem) {
  // Add a CardItem to the top of the pile
  int yOffset = 20;  // Overlap between cards
  if (!cardItems_.empty()) {
    // Position the new card slightly below the top card
    CardItem* topCard = cardItems_.back();
    cardItem->setPos(topCard->x(), topCard->y() + yOffset);
  } else {
    // Position the first card at the top of the pile
    cardItem->setPos(0, 0);
  }
  cardItems_.push_back(cardItem);  // Add to the visual representation
}

void KlondikePileItem::removeTopCardItem() {
  if (!cardItems_.empty()) {
    delete cardItems_.back();  // Remove the top card visually
    cardItems_.pop_back();
  }
}

CardItem* KlondikePileItem::getTopCardItem() const {
  return cardItems_.empty() ? nullptr : cardItems_.back();
}

void KlondikePileItem::mousePressEvent(QGraphicsSceneMouseEvent* event) {
  qDebug() << "KlondikePileItem clicked. Cards in pile:" << cardItems_.size();
  QGraphicsRectItem::mousePressEvent(event);
}
